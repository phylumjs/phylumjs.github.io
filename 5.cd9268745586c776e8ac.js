(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{309:function(s,t,e){},316:function(s,t,e){"use strict";var a=e(309);e.n(a).a},322:function(s,t,e){"use strict";e.r(t);var a=function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("b-container",{staticClass:"document"},[e("h1",[s._v("Process Task")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://coveralls.io/github/phylumjs/process-task?branch=master",target:"_blank"}},[e("img",{attrs:{src:"https://coveralls.io/repos/github/phylumjs/process-task/badge.svg?branch=master",alt:"Coverage Status"}})]),s._v(" "),e("a",{attrs:{href:"https://travis-ci.org/phylumjs/process-task",target:"_blank"}},[e("img",{attrs:{src:"https://travis-ci.org/phylumjs/process-task.svg?branch=master",alt:"Build Status"}})]),s._v(" "),e("img",{attrs:{src:"https://img.shields.io/npm/v/@phylum/process-task.svg",alt:"Version"}}),s._v(" "),e("img",{attrs:{src:"https://img.shields.io/npm/l/@phylum/process-task.svg",alt:"License"}})]),s._v(" "),e("p",[s._v("Utility for running child processes.")]),s._v(" "),e("h2",[s._v("Installation")]),s._v(" "),e("pre",[e("code",{staticClass:"language-bash"},[s._v("npm i @phylum/process-task")])]),s._v(" "),e("h2",[s._v("Usage")]),s._v(" "),e("p",[s._v("The "),e("code",[s._v("ProcessTaskState")]),s._v(" class manages a single child process that can be spawned and killed manually."),e("br"),s._v("\nIt is killed automatically when the task is disposed.")]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[e("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" {ProcessTaskState} = "),e("span",{staticClass:"hljs-built_in"},[s._v("require")]),s._v("("),e("span",{staticClass:"hljs-string"},[s._v("'@phylum/process-task'")]),s._v(")")])]),s._v(" "),e("h3",[e("code",[s._v("new ProcessTaskState(ctx, spawn)")])]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[e("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" cp = "),e("span",{staticClass:"hljs-built_in"},[s._v("require")]),s._v("("),e("span",{staticClass:"hljs-string"},[s._v("'child_process'")]),s._v(")\n\n"),e("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),e("span",{staticClass:"hljs-function"},[e("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),e("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),e("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),e("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" state = "),e("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" ProcessTaskState(ctx, () => {\n        "),e("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" cp.fork("),e("span",{staticClass:"hljs-string"},[s._v("'foo.js'")]),s._v(")\n    })\n\n    state.spawn()\n}")])]),s._v(" "),e("ul",[e("li",[s._v("ctx "),e("code",[s._v("<Pipeline.Context>")]),s._v(" - The pipeline context to attach to.")]),s._v(" "),e("li",[s._v("spawn "),e("code",[s._v("<function>")]),s._v(" - A function to spawn a child process. The context is passed with the first argument and the function must return the new child process.")])]),s._v(" "),e("h3",[e("code",[s._v("state.ctx")])]),s._v(" "),e("p",[s._v("Get the "),e("code",[s._v("<Pipeline.Context>")]),s._v(" the state was bound to.")]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[s._v("state.ctx === ctx")])]),s._v(" "),e("h3",[e("code",[s._v("state.process")])]),s._v(" "),e("p",[s._v("Get the current "),e("code",[s._v("<ChildProcess>")]),s._v("."),e("br"),s._v("\nIf the process has been killed using "),e("code",[s._v("state.kill(..)")]),s._v(" or the process emitted an exit event, this property will be set to "),e("code",[s._v("null")])]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[e("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (state.process) {\n    state.process.send("),e("span",{staticClass:"hljs-string"},[s._v("'Hello World!'")]),s._v(")\n}")])]),s._v(" "),e("h3",[e("code",[s._v("state.spawn()")])]),s._v(" "),e("p",[s._v("Spawn the process if not alive.")]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[e("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (state.spawn()) {\n    "),e("span",{staticClass:"hljs-comment"},[s._v("// A new process has been spawned.")]),s._v("\n} "),e("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n    "),e("span",{staticClass:"hljs-comment"},[s._v("// The process is alive.")]),s._v("\n}")])]),s._v(" "),e("ul",[e("li",[s._v("returns "),e("code",[s._v("<ChildProcess> | false")]),s._v(" - The new child process if created or false otherwise.")])]),s._v(" "),e("h3",[e("code",[s._v("state.respawn()")])]),s._v(" "),e("p",[s._v("Kill the current process if alive and spawn a new one.")]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[e("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" proc = state.respawn()")])]),s._v(" "),e("ul",[e("li",[s._v("returns "),e("code",[s._v("<ChildProcess>")]),s._v(" - The new child process.")])]),s._v(" "),e("h3",[e("code",[s._v("state.kill([signal])")])]),s._v(" "),e("p",[s._v("Kill the current process if alive."),e("br"),s._v("\nOnly use this function if you are expecting the process to exit after receiving the signal. Otherwise use "),e("code",[s._v("state.process.kill(..)")])]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[s._v("state.kill()\nstate.process === "),e("span",{staticClass:"hljs-literal"},[s._v("null")])])]),s._v(" "),e("p",[s._v("Note that "),e("code",[s._v("state.process")]),s._v(" will be set to "),e("code",[s._v("null")]),s._v(" after calling this function.")]),s._v(" "),e("h3",[e("code",[s._v("Event: 'spawn'")])]),s._v(" "),e("p",[s._v("The "),e("code",[s._v("spawn")]),s._v(" event is emitted when a new process has been spawned using "),e("code",[s._v("state.spawn(..)")]),s._v(" or "),e("code",[s._v("state.respawn(..)")]),s._v(". The child process is passed with the first argument. This can be useful for listening to process related events like ipc messages.")]),s._v(" "),e("pre",[e("code",{staticClass:"language-js"},[s._v("state.on("),e("span",{staticClass:"hljs-string"},[s._v("'spawn'")]),s._v(", process => {\n    process.on("),e("span",{staticClass:"hljs-string"},[s._v("'message'")]),s._v(", msg => {\n        "),e("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),e("span",{staticClass:"hljs-string"},[s._v("'Message from child process:'")]),s._v(", msg)\n    })\n})")])])])};a._withStripped=!0;e(316);var n=e(51),l=Object(n.a)({},a,[],!1,null,null,null);l.options.__file="src/pages/ecosystem-process-task.md";t.default=l.exports}}]);
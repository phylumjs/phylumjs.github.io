(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{204:function(s,a,t){"use strict";t.r(a);var e=function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("app-document",[t("h1",[s._v("Tasks")]),s._v(" "),t("p",[t("em",[s._v("Tasks")]),s._v(" execute async operations."),t("br"),s._v("\nThey can process the output of other tasks or update their own output over time.")]),s._v(" "),t("h2",[s._v("Containers")]),s._v(" "),t("p",[s._v("Task instances should be obtained from a container."),t("br"),s._v("\nTo get started, you can use the same container for everything or "),t("router-link",{attrs:{to:"/manual/containers"}},[s._v("read more...")])],1),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { Container } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'@phylum/pipeline'")]),s._v(";\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" container = "),t("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Container();\n\ncontainer.get(MyTask) "),t("span",{staticClass:"hljs-comment"},[s._v("// -> MyTask { ... }")])])]),s._v(" "),t("h2",[s._v("Events")]),s._v(" "),t("p",[s._v("When a task instance is created, it will attach itself to the closest "),t("strong",[s._v("pipeline")]),s._v(" instance from it's container. The pipeline is an event aggregator that allows tasks to publish or subscribe to events.")]),s._v(" "),t("h2",[s._v("Basic Implementation")]),s._v(" "),t("p",[s._v("Task behaviour is implemented with the "),t("code",[s._v(".run")]),s._v(" function. If it returns a promise, that promise will be used as output."),t("br"),s._v("\nThe following task loads a json config file:")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { Task } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'@phylum/pipeline'")]),s._v(";\n"),t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { readJson } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'some-cool-async-fs-library'")]),s._v(";\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" ConfigLoader "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("string")]),s._v("> {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" run() {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" readJson("),t("span",{staticClass:"hljs-string"},[s._v("'config.json'")]),s._v(");\n    }\n}")])]),s._v(" "),t("h2",[s._v("Updates")]),s._v(" "),t("p",[s._v("When a task detects changes, it can push an updated output to it's consumers."),t("br"),s._v("\nThe following task loads a json config file and pushes an update when the config file is changed.")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { readJson, watchFile } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'some-cool-async-fs-library'")]),s._v(";\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" ConfigLoader "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("any")]),s._v("> {\n    run() {\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Read config:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".push(readJson("),t("span",{staticClass:"hljs-string"},[s._v("'config.json'")]),s._v("));\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// and watch for changes:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" watcher = watchFile("),t("span",{staticClass:"hljs-string"},[s._v("'config.json'")]),s._v(");\n        watcher.on("),t("span",{staticClass:"hljs-string"},[s._v("'change'")]),s._v(", "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" {\n            "),t("span",{staticClass:"hljs-comment"},[s._v("// Read updated config and update output:")]),s._v("\n            "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".push(readJson("),t("span",{staticClass:"hljs-string"},[s._v("'config.json'")]),s._v("));\n        })\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// When the task is deactivated, close the watcher:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".disposable("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" watcher.close());\n    }\n}")])]),s._v(" "),t("h2",[s._v("Soft Dependencies")]),s._v(" "),t("p",[s._v("When a task uses a single output of an output source, this is called a "),t("strong",[s._v("soft dependency")]),s._v("."),t("br"),s._v("\nWhenever the source emits updated output, the dependent task is reset, so that it will re-execute and use the updated output in the next run."),t("br"),s._v(" "),t("em",[s._v("Note that the task could miss some updates, when the output source pushes updates while the task is beeing reset.")])]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" GetMessage "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("string")]),s._v("> {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" run() {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'Hello World!'")]),s._v(";\n    }\n}\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" LogMessage "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("void")]),s._v("> {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" run() {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" message = "),t("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".use(GetMessage);\n        "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(message);\n    }\n}")])]),s._v(" "),t("h2",[s._v("Dynamic Dependencies")]),s._v(" "),t("p",[s._v("When a task implements it's own logic for handling output, this is called a "),t("strong",[s._v("dynamic dependency")]),s._v("."),t("br"),s._v("\nThe following is an example of a task that handles multiple output of a "),t("code",[s._v("getLatestMessage")]),s._v(" task without beeing reset:")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-comment"},[s._v("// GetLatestMessage is a task that may emit multiple outputs over time.")]),s._v("\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" LogMessage "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("void")]),s._v("> {\n    run() {\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Pipe every output of the 'getLatestMessage' task")]),s._v("\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// to the callback that handles output states:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" binding = container.get(GetLatestMessage).pipe("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("state")]),s._v(" =>")]),s._v(" {\n            state.then("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("message")]),s._v(" =>")]),s._v(" {\n                "),t("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log(message);\n            }).catch("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("error")]),s._v(" =>")]),s._v(" {\n                "),t("span",{staticClass:"hljs-comment"},[s._v("// In case of an error, you may want to")]),s._v("\n                "),t("span",{staticClass:"hljs-comment"},[s._v("// forward it to consumers of this task:")]),s._v("\n                "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".error(error);\n            });\n        });\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Ensure that the task is active:")]),s._v("\n        getLatestMessage.activate();\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// 'binding' is a callback that removes the callback,")]),s._v("\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// so we want to remove it when this task is deactivated:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".dispose(binding);\n    }\n}")])]),s._v(" "),t("h2",[s._v("Resources")]),s._v(" "),t("p",[s._v("Resources like file system watchers that are allocated by running a task should disposed when the task is deactivated.")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { TaskContext } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'@phylum/pipeline'")]),s._v(";\n\n"),t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" WatchFiles "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("void")]),s._v("> {\n    run(context: TaskContext) {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" watcher = createSomeFSWatcher();\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Automatically close the watcher when this task is deactivated:")]),s._v("\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".disposable("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" watcher.close());\n    }\n}")])]),s._v(" "),t("p",[s._v("Note that your task can be deactivated while it is still running."),t("br"),s._v("\nIf you allocate resources, you should make sure that the task is still active or use a disposable with an asynchronously resolved callback like so:")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" WatchFiles "),t("span",{staticClass:"hljs-keyword"},[s._v("extends")]),s._v(" Task<"),t("span",{staticClass:"hljs-built_in"},[s._v("void")]),s._v("> {\n    "),t("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" run(context: TaskContext) {\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" disposable = "),t("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".disposable();\n\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Dome something else...")]),s._v("\n\n        "),t("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" watcher = createSomeFSWatcher();\n        "),t("span",{staticClass:"hljs-comment"},[s._v("// Automatically close the watcher when this task is deactivated:")]),s._v("\n        disposable.resolve("),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" watcher.close());\n    }\n}")])]),s._v(" "),t("h2",[s._v("Error Handling")]),s._v(" "),t("p",[s._v("If an error occurs while invoking a dispose callback, a "),t("code",[s._v("TaskError")]),s._v(" event is published to all attached event aggregators:")]),s._v(" "),t("pre",[t("code",{staticClass:"language-ts"},[t("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { TaskError } "),t("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),t("span",{staticClass:"hljs-string"},[s._v("'@phylum/pipeline'")]),s._v(";\n\ncontainer.get(Pipeline).subscribe<TaskError>(TaskError, "),t("span",{staticClass:"hljs-function"},[t("span",{staticClass:"hljs-params"},[s._v("error")]),s._v(" =>")]),s._v(" {\n    error.task; "),t("span",{staticClass:"hljs-comment"},[s._v("// The task that published the error.")]),s._v("\n    error.error; "),t("span",{staticClass:"hljs-comment"},[s._v("// The error.")]),s._v("\n});")])]),s._v(" "),t("p",[s._v("If the task pushes rejected output, the emitted output states can be safely ignored without causing unhandled rejections.")])])};e._withStripped=!0;var n=t(15),l=Object(n.a)({},e,[],!1,null,null,null);l.options.__file="manual/tasks.md";a.default=l.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{313:function(s,t,a){"use strict";a.r(t);var e=function(){var s=this.$createElement;this._self._c;return this._m(0)};e._withStripped=!0;var n=a(29),l=Object(n.a)({},e,[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",[a("h1",[s._v("Task API")]),s._v(" "),a("p",[s._v("Tasks are simple functions."),a("br"),s._v("\nThe task context is passed with the first argument:")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-built_in"},[s._v("console")]),s._v(".log("),a("span",{staticClass:"hljs-string"},[s._v("'Hello World!'")]),s._v(")\n}")])]),s._v(" "),a("h3",[a("code",[s._v("ctx.data")])]),s._v(" "),a("p",[s._v("An object to store custom data that is related to the current context.")]),s._v(" "),a("h3",[a("code",[s._v("ctx.pipeline")])]),s._v(" "),a("p",[s._v("A reference to the pipeline.")]),s._v(" "),a("h3",[a("code",[s._v("ctx.isEntry")])]),s._v(" "),a("p",[s._v("True if this task is the entry task of the pipeline.")]),s._v(" "),a("h3",[a("code",[s._v("ctx.isUnused")])]),s._v(" "),a("p",[s._v("True if this task is not used by another task."),a("br"),s._v("\nUnused tasks will be disposed when the entry task resolves or rejects.")]),s._v(" "),a("h3",[a("code",[s._v("ctx.use(fn)")])]),s._v(" "),a("p",[s._v("Use another task as dependency.\nIf the dependency is disposed or updates, the current task is disposed.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("foo")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'Hello World!'")]),s._v("\n}\n\n"),a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("bar")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("await")]),s._v(" ctx.use(foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> 'Hello World!'")]),s._v("\n}")])]),s._v(" "),a("ul",[a("li",[s._v("fn "),a("code",[s._v("<function>")]),s._v(" - The dependency task.")])]),s._v(" "),a("h3",[a("code",[s._v("ctx.push(state)")])]),s._v(" "),a("p",[s._v("Push an update to all dependents (and the pipeline if this task is the entry task).")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    setTimeout("),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" {\n        ctx.push("),a("span",{staticClass:"hljs-string"},[s._v("'updated value'")]),s._v(")\n    }, "),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(")\n\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'initial value'")]),s._v("\n}")])]),s._v(" "),a("ul",[a("li",[s._v("state "),a("code",[s._v("<Promise> | <any>")]),s._v(" - The new state. If not a promise, it will be converted to a resolved promise with the specific value."),a("ul",[a("li",[s._v("Rejections are ignored until the state is picked up by a dependent task or the pipeline.")])])])]),s._v(" "),a("h3",[a("code",[s._v("ctx.pull(fn, handler)")])]),s._v(" "),a("p",[s._v("Accept updates from a dependency."),a("br"),s._v(" "),a("em",[s._v("Using only .pull(..) does not start the dependency.")])]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    ctx.pull(foo, state => {\n        "),a("span",{staticClass:"hljs-comment"},[s._v("// 'foo' has updated.")]),s._v("\n    })\n}")])]),s._v(" "),a("ul",[a("li",[s._v("fn "),a("code",[s._v("<function>")]),s._v(" - The dependency task.")]),s._v(" "),a("li",[s._v("handler "),a("code",[s._v("<function>")]),s._v(" - The function to handle updates."),a("ul",[a("li",[s._v("state "),a("code",[s._v("<Promise>")]),s._v(" - The new state of the dependency after the update.")])])])]),s._v(" "),a("h3",[a("code",[s._v("ctx.pullImmediate(fn, handler)")])]),s._v(" "),a("p",[s._v("Use another task as dependency and accept updates.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    ctx.pullImmediate(foo, state => {\n        "),a("span",{staticClass:"hljs-comment"},[s._v("// 'foo' has been started or updated.")]),s._v("\n    })\n}")])]),s._v(" "),a("ul",[a("li",[s._v("fn "),a("code",[s._v("<function>")]),s._v(" - The dependency task.")]),s._v(" "),a("li",[s._v("handler "),a("code",[s._v("<function>")]),s._v(" - The function to handle the initial state and updates."),a("ul",[a("li",[s._v("state "),a("code",[s._v("<Promise>")]),s._v(" - The initial or new state of the dependency.")])])])]),s._v(" "),a("h3",[a("code",[s._v("ctx.isPulling(fn)")])]),s._v(" "),a("p",[s._v("Check if an update handler was registered using "),a("code",[s._v(".pull(..)")]),s._v(" or "),a("code",[s._v(".pullImmediate(..)")])]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    ctx.isPulling(foo) === "),a("span",{staticClass:"hljs-literal"},[s._v("false")]),s._v("\n    ctx.pull(foo, () => { ... })\n    ctx.isPulling(foo) === "),a("span",{staticClass:"hljs-literal"},[s._v("true")]),s._v("\n}")])]),s._v(" "),a("ul",[a("li",[s._v("fn "),a("code",[s._v("<function>")]),s._v(" - The dependency task.")]),s._v(" "),a("li",[s._v("returns "),a("code",[s._v("<boolean>")]),s._v(" - True if an update handler is registered for the specified task. Otherwise false.")])]),s._v(" "),a("h3",[a("code",[s._v("ctx.drop(fn)")])]),s._v(" "),a("p",[s._v("Remove a dependency and possible update handlers."),a("br"),s._v(" "),a("em",[s._v("Dropping a dependency will not dispose it automatically. See pipeline options and pipeline.disposeUnused() for more info.")])]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// ...")]),s._v("\n    ctx.drop(foo)\n}")])]),s._v(" "),a("ul",[a("li",[s._v("fn "),a("code",[s._v("<function>")]),s._v(" - The dependency task.")])]),s._v(" "),a("h3",[a("code",[s._v("ctx.dispose([silent])")])]),s._v(" "),a("p",[s._v("Dispose this task."),a("br"),s._v("\nThis will detach the task from all dependencies and dependents.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    setTimeout("),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" =>")]),s._v(" {\n        ctx.dispose()\n    }, "),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(")\n}")])]),s._v(" "),a("ul",[a("li",[s._v("silent "),a("code",[s._v("<any>")]),s._v(" - If truthy, dependent tasks and the pipeline will not be notified about the disposal. Otherwise dependent tasks will be updated and the task will be re-executed if this is the pipeline entry. Default is "),a("code",[s._v("false")])])]),s._v(" "),a("h3",[a("code",[s._v("Event: 'dispose'")])]),s._v(" "),a("p",[s._v("The "),a("em",[s._v("dispose")]),s._v(" event is emitted when this task is disposed."),a("br"),s._v("\nThis event should be used to destroy resources like file system watchers.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-js"},[a("span",{staticClass:"hljs-keyword"},[s._v("async")]),s._v(" "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("function")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("example")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("ctx")]),s._v(") ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" watcher = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" SomeFSWatcher()\n    watcher.on("),a("span",{staticClass:"hljs-string"},[s._v("'change'")]),s._v(", () => {\n        ctx.push("),a("span",{staticClass:"hljs-string"},[s._v("'something changed'")]),s._v(")\n    })\n\n    ctx.on("),a("span",{staticClass:"hljs-string"},[s._v("'dispose'")]),s._v(", addDisposal => {\n        addDisposal(watcher.destroy())\n    })\n\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'nothing changed'")]),s._v("\n}")])]),s._v(" "),a("ul",[a("li",[s._v("addDisposal "),a("code",[s._v("<function>")]),s._v(" - A function to add a disposal state."),a("ul",[a("li",[s._v("state "),a("code",[s._v("<Promise> | <any>")]),s._v(" - A promise to delay the re-execution of the task or the promise returned by "),a("code",[s._v("pipeline.disable()")]),s._v(".")])])])])])}],!1,null,null,null);l.options.__file="src/content/pipeline/task-api.md";t.default=l.exports}}]);
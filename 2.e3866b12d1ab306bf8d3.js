(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{205:function(s,n,a){"use strict";a.r(n);var t=function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("app-document",[a("h1",[s._v("Containers")]),s._v(" "),a("p",[s._v("A "),a("em",[s._v("container")]),s._v(" represents the environment in which tasks are executed."),a("br"),s._v("\nThey can hold different task instances or can be used for dependency injection.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" { Container } "),a("span",{staticClass:"hljs-keyword"},[s._v("from")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'@phylum/pipeline'")]),s._v(";\n\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" container = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Container();")])]),s._v(" "),a("p",[s._v("Containers are generic maps of "),a("em",[s._v("instance types")]),s._v(" to "),a("em",[s._v("instances")]),s._v("."),a("br"),s._v("\nIf an instance of a specific type is requested from a container, it will return an existing instance of that type or create a new instance.")]),s._v(" "),a("h2",[s._v("Accessing Instances")]),s._v(" "),a("p",[s._v("Instances can be obtained automatically using the "),a("code",[s._v("get")]),s._v(" or "),a("code",[s._v("getOwn")]),s._v(" function."),a("br"),s._v("\nMissing instances will be created automatically and stored in the container.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[a("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" Foo {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("constructor")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("container: Container")]),s._v(") {\n        "),a("span",{staticClass:"hljs-comment"},[s._v("// container will be passed to the constructor.")]),s._v("\n    }\n}\n\ncontainer.get(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> Foo { }")])])]),s._v(" "),a("p",[s._v("You can also delete existing instances or check for existance:")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[s._v("container.delete(Foo)\n\ncontainer.has(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> false")])])]),s._v(" "),a("p",[s._v("It can be enforced that a new instance is created:")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[s._v("container.use(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> Foo { }")])])]),s._v(" "),a("h2",[s._v("Advanced Instance Types")]),s._v(" "),a("p",[s._v("An instance type is used as the key for storing existing instances or for creating new ones."),a("br"),s._v("\nIt should be one of the following and should always return a truthy value as the instance.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[a("span",{staticClass:"hljs-comment"},[s._v("// An object or a class with a static '.createInstance' function:")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" Foo {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" createInstance(container: Container) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'foo'")]),s._v(";\n    }\n}\n\ncontainer.get(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> 'foo'")]),s._v("\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("// An arrow function:")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" bar = "),a("span",{staticClass:"hljs-function"},[s._v("("),a("span",{staticClass:"hljs-params"},[s._v("container: Container")]),s._v(") =>")]),s._v(" {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'bar'")]),s._v(";\n}\n\ncontainer.get(bar) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> 'bar'")]),s._v("\n\n"),a("span",{staticClass:"hljs-comment"},[s._v("// A class:")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" Baz {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("constructor")]),s._v("("),a("span",{staticClass:"hljs-params"},[s._v("container: Container")]),s._v(") {\n    }\n}\n\ncontainer.get(Baz) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> Baz { }")])])]),s._v(" "),a("h2",[s._v("Nested Containers")]),s._v(" "),a("p",[s._v("Containers can be nested to share instances across containers."),a("br"),s._v("\nTo create a nested container, the parent is passed to the constructor:")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" parent = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Container();\n\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" child = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Container(parent);")])]),s._v(" "),a("p",[s._v("A nested container implicitly has all instances from it's parents.")]),s._v(" "),a("pre",[a("code",{staticClass:"language-ts"},[s._v("parent.use(Foo);\n\nchild.has(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> true")]),s._v("\nchild.get(Foo) "),a("span",{staticClass:"hljs-comment"},[s._v("// -> Foo { }")])])])])};t._withStripped=!0;var e=a(15),c=Object(e.a)({},t,[],!1,null,null,null);c.options.__file="manual/containers.md";n.default=c.exports}}]);